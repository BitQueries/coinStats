Instructions for the OHLC query

You can retrieve data for various time intervals changing few parameters:


In the "options: {limit: 5, desc: "timeInterval.minute"}" you can change "timeInterval.minute" with  timeInterval.hour, timeInterval.day, timeInterval.month
In order the query to work you must also change the following respectively

      timeInterval {
        minute(count:1)
      }		FOR MINUTES
      
      timeInterval {
        hour(count:1)
      }		FOR HOURS
      
      timeInterval {
        month(count:1)
      }		FOR MONTHS

You can change the "count:" setting for the desired time period.
Example : timeInterval {
        minute(count:5)
      }		FOR 5 MIN OHLC DATA







Query for the latest price record for given coin.

{
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, asc: "block.timestamp.time"}
	  date: {since: "DESIRED TIME", till: "DESIRED TIME"}
      exchangeName: {in:  ["Pancake v2"]}
      baseCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
    ) {
      
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      
      baseCurrency {
        symbol
        address
      }
      
      quoteCurrency {
        symbol
        address
      }
      
      quotePrice
    }
  }
}


=============================

Data response:


Block:
Timestamp for the retrieved block data.

Base currency (BNB for example):
Address
Symbol


Quote currency (USDT for example):
Address
Symbol

Quote price:
Price of the quote currency against the base currency.
In other words, how many tokens of the quote currency you will receive for 1 token from the base currency.


=============================

Output format:

json.data.ethereum.dexTrades[a].block.timestamp.time;
json.data.ethereum.dexTrades[a].baseCurrency.symbol;
json.data.ethereum.dexTrades[a].baseCurrency.address;
json.data.ethereum.dexTrades[a].quoteCurrency.symbol;
json.data.ethereum.dexTrades[a].quoteCurrency.address;
json.data.ethereum.dexTrades[a].quotePrice;


=============================


Current used currencies are:
Cake for baseCurrency
USDT for quoteCurrency

"asc:" stands for ascending order
"desc:" stands for descending order
date: {since: "", till: ""} from time to time (can be added null if you dont want to use the one or removed enitrely) The time format used is ISO 8601
"limit:" stands for results displayed - use number above 1 for more than 1 result if you use combined "since:" and "till:"

sample Vanilla JS code retrieving the now time in ISO 8601 format:

var now = new Date().toISOString();


For "options:" limit is set at 1 result for the latest block in descending order.
If you set "asc:" instead of "desc:", you will get the first price record for that currency in ascending order.
If you set *"limit:" greater than 1 you will receive data for all the previous/next price records over time depending on the orders you chose.

*Please mind that there is current limit for 10 000 records for 1 query (this bitquery policy can change in time).

=============================

Variables can be used for easier interaction.
Example:

baseCurrency: {is: " `+ YOUR VARIABLE ADDRESS HERE +` "}
quoteCurrency: {is: " `+ YOUR VARIABLE ADDRESS HERE +` "}

=============================

Sample function written in Vanilla JS:

async function checkQuery() {
	
	
	var query = `
		{
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.timestamp.time"}
      exchangeName: {in:  ["Pancake v2"]}
      baseCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
    ) {
      
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      
      baseCurrency {
        symbol
        address
      }
      
      quoteCurrency {
        symbol
        address
      }
      
      quotePrice
    }
  }
}

	
	`;
	
	const url = "https://graphql.bitquery.io/";
	const opts = {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
		
		
		
      "X-API-KEY": "////// YOUR API KEY HERE ////////"
	  
	  
    },
    body: JSON.stringify({
        query
    })
};
	
	fetch(url, opts).then(
	function(response) {
	  if (response.status !== 200) {
		
		console.log('Looks like there was a problem. Status Code: ' +
		  response.status);
		return;
	  }
  
  // response
  response.json().then(function(json) {
	  
	  //Console log response data
	  console.log(json);
	  
		for(let a=0; a<json.data.ethereum.dexTrades.length; a++) {
		
		//Do something with the data
		json.data.ethereum.dexTrades[a].block.timestamp.time;
		json.data.ethereum.dexTrades[a].baseCurrency.symbol;
		json.data.ethereum.dexTrades[a].baseCurrency.address;
		json.data.ethereum.dexTrades[a].quoteCurrency.symbol;
		json.data.ethereum.dexTrades[a].quoteCurrency.address;
		json.data.ethereum.dexTrades[a].quotePrice;
			
		}
	
  });
  
  
}
).catch(function(err) {
	alert('Error');
console.log('Fetch Error :', err);
});
	
	
}
